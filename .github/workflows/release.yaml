name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux-amd64, macos, windows-64bit]
        toolchain: [stable]
        include:
        - build: linux-amd64
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          use-cross: true
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
          use-cross: false
        - build: windows-64bit
          os: windows-latest
          target: x86_64-pc-windows-msvc
          use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.zip"
            cp "target/${{ matrix.target }}/release/gleam.exe" "gleam.exe"
            7z a "$ARCHIVE" "gleam.exe"
            echo "ASSET=$ARCHIVE" >> $GITHUB_ENV
          else
            ARCHIVE="gleam-$VERSION-${{ matrix.build }}.tar.gz"
            cp "target/${{ matrix.target }}/release/gleam" "gleam"
            tar -czvf "$ARCHIVE" "gleam"
            echo "ASSET=$ARCHIVE" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/gzip

  publish-container-images:
    name: publish-container-images
    needs: build-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base-image:
          - scratch
          - erlang
          - erlang-slim
          - erlang-alpine
          - elixir
          - elixir-slim
          - elixir-alpine

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate with GitHub container registry
        run: echo "${{ secrets.CONTAINER_REGISTRY_PERSONAL_ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Download Gleam archive from GitHub release
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Download archive
          URL=https://github.com/${{ github.repository }}/releases/download/$VERSION/gleam-$VERSION-linux-amd64.tar.gz
          echo Downloading $URL
          curl -Lo gleam.tar.gz $URL

      - name: Unpack Gleam binary from archive
        run: tar xf gleam.tar.gz

      - name: Build container image
        run: docker build --file containers/${{ matrix.base-image }}.dockerfile --tag the-image .

      - name: Push image
        run: |
          IMAGE_ID_BASE=ghcr.io/${{ github.repository }}/gleam-${{ matrix.base-image }}

          # Change all uppercase to lowercase
          IMAGE_ID_BASE=$(echo $IMAGE_ID_BASE | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Prepare the tag
          TAG=$IMAGE_ID_BASE:$VERSION
          echo TAG=$TAG

          # Push the image to the registry under the tag
          docker tag the-image $TAG
          docker push $TAG
